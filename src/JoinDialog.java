
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 * Finestra con elenco delle collaborazione disponibile <br>
 * L'utente sceglie il suo username e può inviare la rischiesta di
 * collaborazione
 */
public class JoinDialog extends javax.swing.JDialog {

    private String msg;
    private Timer timer;
    private InetAddress group;
    private MulticastSocket s;
    private DatagramPacket packet;
    private ListenJoin thread;
    private DefaultTableModel model;
    public static boolean accepted;
    public static String nome;

    /**
     * Inizializza i componenti grafici e stabilisce una connessione <br>
     * Avvia un thread in ascolto per ricevere dei pacchetti
     *
     * @param parent Finestra madre
     * @param modal Modalità di apertura
     * @param txtCode Casella di testo
     * @param userList Lista degli utenti
     * @see ListenJoin
     * @see MulticastSocket
     */
    public JoinDialog(java.awt.Frame parent, boolean modal, JTextArea txtCode,JTable userList) {
        super(parent, modal);
        initComponents();
        timer = new Timer();
        thread = new ListenJoin(tblCanali, txtCode,this,userList);
        thread.execute();
        model = (DefaultTableModel) tblCanali.getModel();
        accepted=false;
        if (UserLogIn.log == true){
            txtNome.setText(UserLogIn.user);
            txtNome.setEditable(false);
        }
        try {
            group = InetAddress.getByName("228.5.6.7");
            s = new MulticastSocket(6789);
            s.setLoopbackMode(true);
            s.joinGroup(group);
            //packet = new DatagramPacket(msg.getBytes(), msg.length(),group, 6789);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Errr");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEntra = new javax.swing.JButton();
        btnAnnulla = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCanali = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNome = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Collaborazioni Attive");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnEntra.setText("Entra");
        btnEntra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntraActionPerformed(evt);
            }
        });

        btnAnnulla.setText("Annulla");
        btnAnnulla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnullaActionPerformed(evt);
            }
        });

        tblCanali.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Indirizzo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCanali);

        txtNome.setFont(new java.awt.Font("Tahoma", 0, 9)); // NOI18N
        jScrollPane1.setViewportView(txtNome);

        jLabel1.setText("Nickname: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 169, Short.MAX_VALUE)
                        .addComponent(btnEntra)
                        .addGap(18, 18, 18)
                        .addComponent(btnAnnulla))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAnnulla)
                    .addComponent(btnEntra))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Chiusura della finestra
     *
     * @param evt evento click dell'opzione Annulla
     */
    private void btnAnnullaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnullaActionPerformed
        try {
            thread.listener.close();
            thread.socket.close();
        } catch (IOException ex) {
            Logger.getLogger(JoinDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(thread.cancel(true));
        timer.cancel();
        this.dispose();
    }//GEN-LAST:event_btnAnnullaActionPerformed

    /**
     * Invia la rischista partecipazione alla collaborazione selezionato
     *
     * @param evt evento click dell'opzione Entra
     * @see Socket
     */
    private void btnEntraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntraActionPerformed
        nome = txtNome.getText();
        if (!nome.equals("")) {
            int column = 1;
            int row = tblCanali.getSelectedRow();
            String value = "";
            String address = "";
            try {
                value = tblCanali.getModel().getValueAt(row, column).toString();
                Socket client = new Socket(value, 9091);
                DataOutputStream out = new DataOutputStream(client.getOutputStream());
                ByteBuffer bytebu = ByteBuffer.allocate(256);
                InetAddress localHost = InetAddress.getLocalHost();
                address = ListenPublic.normalizzaIp(localHost.getHostAddress());
                bytebu.put(0, (byte) 4);
                bytebu.position(1);
                for (int i = 0; i < 15; i++) {
                    bytebu.putChar(address.charAt(i));
                }
                for (int i = 0; i < nome.length(); i++) {
                    bytebu.putChar(nome.charAt(i));
                }
                out.write(bytebu.array());
                client.close();
                out.close();
                btnEntra.setEnabled(false);
            } catch (Exception E) {
                JOptionPane.showConfirmDialog(null, "Seleziona un host", "", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(value);
        } else {
            JOptionPane.showConfirmDialog(null, "Inserisci prima il nickname", "Nome assente", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEntraActionPerformed

    /**
     * Avvia la funzione aggiorna che viene eseguita periodicamente
     *
     * @param evt evento apertura della finestra
     * @see Timer
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                aggiorna();
            }
        }, 0, 10000);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            thread.listener.close();
            thread.socket.close();
        } catch (IOException ex) {
            Logger.getLogger(JoinDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(thread.cancel(true));
        timer.cancel();
        this.dispose();
    }//GEN-LAST:event_formWindowClosed

    /**
     * Invia un messaggio di ricerca in broadcast per ricevere poi la risposta
     */
    public void aggiorna() {
        ByteBuffer buffer = ByteBuffer.allocate(31);
        String address = "";
        model.setRowCount(0);
        try {
            InetAddress localHost = InetAddress.getLocalHost();
            address = ListenPublic.normalizzaIp(localHost.getHostAddress());
        } catch (UnknownHostException ex) {
            Logger.getLogger(JoinDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println(address);
        buffer.put(0, (byte) 2);
        buffer.position(1);
        for (int i = 0; i < 15; i++) {
            buffer.putChar(address.charAt(i));
        }
        packet = new DatagramPacket(buffer.array(), buffer.capacity(), group, 6789);
        try {
            s.send(packet);
        } catch (IOException ex) {
            Logger.getLogger(JoinDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnnulla;
    private javax.swing.JButton btnEntra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCanali;
    private javax.swing.JTextPane txtNome;
    // End of variables declaration//GEN-END:variables
}
